declare type EventArguments<T> = T extends (...args: infer Args) => void ? Args : [];
export interface Emitter<Events> {
    on: <Event extends keyof Events>(event: Event, handler: Events[Event]) => void;
    off: <Event extends keyof Events>(event: Event, handler: Events[Event]) => void;
    emit: <Event extends keyof Events>(event: Event, ...args: EventArguments<Events[Event]>) => void;
}
export declare function createEventEmitter<Events extends Record<string, Function>>(): Emitter<Events>;
export {};
