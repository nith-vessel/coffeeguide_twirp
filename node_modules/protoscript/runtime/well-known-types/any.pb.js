// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: google/protobuf/any.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter, encodeBase64Bytes, decodeBase64Bytes, } from "protoscript";
//========================================//
//        Protobuf Encode / Decode        //
//========================================//
export const Any = {
    /**
     * Serializes Any to protobuf.
     */
    encode: function (msg) {
        return Any._writeMessage(msg, new BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes Any from protobuf.
     */
    decode: function (bytes) {
        return Any._readMessage(Any.initialize(), new BinaryReader(bytes));
    },
    /**
     * Initializes Any with all fields set to their default value.
     */
    initialize: function () {
        return {
            typeUrl: "",
            value: new Uint8Array(),
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        if (msg.typeUrl) {
            writer.writeString(1, msg.typeUrl);
        }
        if (msg.value?.length) {
            writer.writeBytes(2, msg.value);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.typeUrl = reader.readString();
                    break;
                }
                case 2: {
                    msg.value = reader.readBytes();
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
//========================================//
//          JSON Encode / Decode          //
//========================================//
export const AnyJSON = {
    /**
     * Serializes Any to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(AnyJSON._writeMessage(msg));
    },
    /**
     * Deserializes Any from JSON.
     */
    decode: function (json) {
        return AnyJSON._readMessage(AnyJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes Any with all fields set to their default value.
     */
    initialize: function () {
        return {
            typeUrl: "",
            value: new Uint8Array(),
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        const json = {};
        if (msg.typeUrl) {
            json["typeUrl"] = msg.typeUrl;
        }
        if (msg.value?.length) {
            json["value"] = encodeBase64Bytes(msg.value);
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        const _typeUrl = json["typeUrl"] ?? json["type_url"];
        if (_typeUrl) {
            msg.typeUrl = _typeUrl;
        }
        const _value = json["value"];
        if (_value) {
            msg.value = decodeBase64Bytes(_value);
        }
        return msg;
    },
};
