import type { ByteSource } from "protoscript";
import { BinaryReader, BinaryWriter } from "protoscript";
/**
 * A generic empty message that you can re-use to avoid defining duplicated
 * empty messages in your APIs. A typical example is to use it as the request
 * or the response type of an API method. For instance:
 *
 *     service Foo {
 *       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *     }
 *
 */
export interface Empty {
}
export declare const Empty: {
    /**
     * Serializes Empty to protobuf.
     */
    encode: (_msg?: Partial<Empty>) => Uint8Array;
    /**
     * Deserializes Empty from protobuf.
     */
    decode: (_bytes?: ByteSource) => Empty;
    /**
     * Initializes Empty with all fields set to their default value.
     */
    initialize: () => Empty;
    /**
     * @private
     */
    _writeMessage: (_msg: Partial<Empty>, writer: BinaryWriter) => BinaryWriter;
    /**
     * @private
     */
    _readMessage: (_msg: Empty, _reader: BinaryReader) => Empty;
};
export declare const EmptyJSON: {
    /**
     * Serializes Empty to JSON.
     */
    encode: (_msg?: Partial<Empty>) => string;
    /**
     * Deserializes Empty from JSON.
     */
    decode: (_json?: string) => Empty;
    /**
     * Initializes Empty with all fields set to their default value.
     */
    initialize: () => Empty;
    /**
     * @private
     */
    _writeMessage: (_msg: Partial<Empty>) => Record<string, unknown>;
    /**
     * @private
     */
    _readMessage: (msg: Empty, _json: any) => Empty;
};
