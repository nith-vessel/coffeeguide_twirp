// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: google/protobuf/wrappers.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter, encodeBase64Bytes, decodeBase64Bytes, } from "protoscript";
//========================================//
//        Protobuf Encode / Decode        //
//========================================//
export const DoubleValue = {
    /**
     * Serializes DoubleValue to protobuf.
     */
    encode: function (msg) {
        return DoubleValue._writeMessage(msg, new BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes DoubleValue from protobuf.
     */
    decode: function (bytes) {
        return DoubleValue._readMessage(DoubleValue.initialize(), new BinaryReader(bytes));
    },
    /**
     * Initializes DoubleValue with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: 0,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        if (msg.value) {
            writer.writeDouble(1, msg.value);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.value = reader.readDouble();
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
export const FloatValue = {
    /**
     * Serializes FloatValue to protobuf.
     */
    encode: function (msg) {
        return FloatValue._writeMessage(msg, new BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes FloatValue from protobuf.
     */
    decode: function (bytes) {
        return FloatValue._readMessage(FloatValue.initialize(), new BinaryReader(bytes));
    },
    /**
     * Initializes FloatValue with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: 0,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        if (msg.value) {
            writer.writeFloat(1, msg.value);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.value = reader.readFloat();
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
export const Int64Value = {
    /**
     * Serializes Int64Value to protobuf.
     */
    encode: function (msg) {
        return Int64Value._writeMessage(msg, new BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes Int64Value from protobuf.
     */
    decode: function (bytes) {
        return Int64Value._readMessage(Int64Value.initialize(), new BinaryReader(bytes));
    },
    /**
     * Initializes Int64Value with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: 0n,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        if (msg.value) {
            writer.writeInt64String(1, msg.value.toString());
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.value = BigInt(reader.readInt64String());
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
export const UInt64Value = {
    /**
     * Serializes UInt64Value to protobuf.
     */
    encode: function (msg) {
        return UInt64Value._writeMessage(msg, new BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes UInt64Value from protobuf.
     */
    decode: function (bytes) {
        return UInt64Value._readMessage(UInt64Value.initialize(), new BinaryReader(bytes));
    },
    /**
     * Initializes UInt64Value with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: 0n,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        if (msg.value) {
            writer.writeUint64String(1, msg.value.toString());
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.value = BigInt(reader.readUint64String());
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
export const Int32Value = {
    /**
     * Serializes Int32Value to protobuf.
     */
    encode: function (msg) {
        return Int32Value._writeMessage(msg, new BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes Int32Value from protobuf.
     */
    decode: function (bytes) {
        return Int32Value._readMessage(Int32Value.initialize(), new BinaryReader(bytes));
    },
    /**
     * Initializes Int32Value with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: 0,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        if (msg.value) {
            writer.writeInt32(1, msg.value);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.value = reader.readInt32();
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
export const UInt32Value = {
    /**
     * Serializes UInt32Value to protobuf.
     */
    encode: function (msg) {
        return UInt32Value._writeMessage(msg, new BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes UInt32Value from protobuf.
     */
    decode: function (bytes) {
        return UInt32Value._readMessage(UInt32Value.initialize(), new BinaryReader(bytes));
    },
    /**
     * Initializes UInt32Value with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: 0,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        if (msg.value) {
            writer.writeUint32(1, msg.value);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.value = reader.readUint32();
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
export const BoolValue = {
    /**
     * Serializes BoolValue to protobuf.
     */
    encode: function (msg) {
        return BoolValue._writeMessage(msg, new BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes BoolValue from protobuf.
     */
    decode: function (bytes) {
        return BoolValue._readMessage(BoolValue.initialize(), new BinaryReader(bytes));
    },
    /**
     * Initializes BoolValue with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: false,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        if (msg.value) {
            writer.writeBool(1, msg.value);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.value = reader.readBool();
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
export const StringValue = {
    /**
     * Serializes StringValue to protobuf.
     */
    encode: function (msg) {
        return StringValue._writeMessage(msg, new BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes StringValue from protobuf.
     */
    decode: function (bytes) {
        return StringValue._readMessage(StringValue.initialize(), new BinaryReader(bytes));
    },
    /**
     * Initializes StringValue with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: "",
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        if (msg.value) {
            writer.writeString(1, msg.value);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.value = reader.readString();
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
export const BytesValue = {
    /**
     * Serializes BytesValue to protobuf.
     */
    encode: function (msg) {
        return BytesValue._writeMessage(msg, new BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes BytesValue from protobuf.
     */
    decode: function (bytes) {
        return BytesValue._readMessage(BytesValue.initialize(), new BinaryReader(bytes));
    },
    /**
     * Initializes BytesValue with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: new Uint8Array(),
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        if (msg.value?.length) {
            writer.writeBytes(1, msg.value);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.value = reader.readBytes();
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
//========================================//
//          JSON Encode / Decode          //
//========================================//
export const DoubleValueJSON = {
    /**
     * Serializes DoubleValue to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(DoubleValueJSON._writeMessage(msg));
    },
    /**
     * Deserializes DoubleValue from JSON.
     */
    decode: function (json) {
        return DoubleValueJSON._readMessage(DoubleValueJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes DoubleValue with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: 0,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        const json = {};
        if (msg.value) {
            json["value"] = msg.value;
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        const _value = json["value"];
        if (_value) {
            msg.value = _value;
        }
        return msg;
    },
};
export const FloatValueJSON = {
    /**
     * Serializes FloatValue to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(FloatValueJSON._writeMessage(msg));
    },
    /**
     * Deserializes FloatValue from JSON.
     */
    decode: function (json) {
        return FloatValueJSON._readMessage(FloatValueJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes FloatValue with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: 0,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        const json = {};
        if (msg.value) {
            json["value"] = msg.value;
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        const _value = json["value"];
        if (_value) {
            msg.value = _value;
        }
        return msg;
    },
};
export const Int64ValueJSON = {
    /**
     * Serializes Int64Value to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(Int64ValueJSON._writeMessage(msg));
    },
    /**
     * Deserializes Int64Value from JSON.
     */
    decode: function (json) {
        return Int64ValueJSON._readMessage(Int64ValueJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes Int64Value with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: 0n,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        const json = {};
        if (msg.value) {
            json["value"] = msg.value.toString();
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        const _value = json["value"];
        if (_value) {
            msg.value = BigInt(_value);
        }
        return msg;
    },
};
export const UInt64ValueJSON = {
    /**
     * Serializes UInt64Value to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(UInt64ValueJSON._writeMessage(msg));
    },
    /**
     * Deserializes UInt64Value from JSON.
     */
    decode: function (json) {
        return UInt64ValueJSON._readMessage(UInt64ValueJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes UInt64Value with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: 0n,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        const json = {};
        if (msg.value) {
            json["value"] = msg.value.toString();
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        const _value = json["value"];
        if (_value) {
            msg.value = BigInt(_value);
        }
        return msg;
    },
};
export const Int32ValueJSON = {
    /**
     * Serializes Int32Value to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(Int32ValueJSON._writeMessage(msg));
    },
    /**
     * Deserializes Int32Value from JSON.
     */
    decode: function (json) {
        return Int32ValueJSON._readMessage(Int32ValueJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes Int32Value with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: 0,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        const json = {};
        if (msg.value) {
            json["value"] = msg.value;
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        const _value = json["value"];
        if (_value) {
            msg.value = _value;
        }
        return msg;
    },
};
export const UInt32ValueJSON = {
    /**
     * Serializes UInt32Value to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(UInt32ValueJSON._writeMessage(msg));
    },
    /**
     * Deserializes UInt32Value from JSON.
     */
    decode: function (json) {
        return UInt32ValueJSON._readMessage(UInt32ValueJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes UInt32Value with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: 0,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        const json = {};
        if (msg.value) {
            json["value"] = msg.value;
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        const _value = json["value"];
        if (_value) {
            msg.value = _value;
        }
        return msg;
    },
};
export const BoolValueJSON = {
    /**
     * Serializes BoolValue to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(BoolValueJSON._writeMessage(msg));
    },
    /**
     * Deserializes BoolValue from JSON.
     */
    decode: function (json) {
        return BoolValueJSON._readMessage(BoolValueJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes BoolValue with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: false,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        const json = {};
        if (msg.value) {
            json["value"] = msg.value;
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        const _value = json["value"];
        if (_value) {
            msg.value = _value;
        }
        return msg;
    },
};
export const StringValueJSON = {
    /**
     * Serializes StringValue to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(StringValueJSON._writeMessage(msg));
    },
    /**
     * Deserializes StringValue from JSON.
     */
    decode: function (json) {
        return StringValueJSON._readMessage(StringValueJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes StringValue with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: "",
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        const json = {};
        if (msg.value) {
            json["value"] = msg.value;
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        const _value = json["value"];
        if (_value) {
            msg.value = _value;
        }
        return msg;
    },
};
export const BytesValueJSON = {
    /**
     * Serializes BytesValue to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(BytesValueJSON._writeMessage(msg));
    },
    /**
     * Deserializes BytesValue from JSON.
     */
    decode: function (json) {
        return BytesValueJSON._readMessage(BytesValueJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes BytesValue with all fields set to their default value.
     */
    initialize: function () {
        return {
            value: new Uint8Array(),
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        const json = {};
        if (msg.value?.length) {
            json["value"] = encodeBase64Bytes(msg.value);
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        const _value = json["value"];
        if (_value) {
            msg.value = decodeBase64Bytes(_value);
        }
        return msg;
    },
};
